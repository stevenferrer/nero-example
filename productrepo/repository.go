// Code generated by nero, DO NOT EDIT.
package productrepo

import (
	"context"
	"reflect"
	"time"

	multierror "github.com/hashicorp/go-multierror"
	"github.com/pkg/errors"
	"github.com/sf9v/nero"
	"github.com/sf9v/nero-example/model"
)

// Repository is an interface for interacting with a Product repository
type Repository interface {
	// Tx begins a new transaction
	Tx(context.Context) (nero.Tx, error)
	// Create creates a Product
	Create(context.Context, *Creator) (id int64, err error)
	// CreateTx creates a Product in a transaction
	CreateTx(context.Context, nero.Tx, *Creator) (id int64, err error)
	// CreateMany batch creates Products
	CreateMany(context.Context, ...*Creator) error
	// CreateManyTx batch creates Products in a transaction
	CreateManyTx(context.Context, nero.Tx, ...*Creator) error
	// Query queries Products
	Query(context.Context, *Queryer) ([]*model.Product, error)
	// QueryTx queries Products in a transaction
	QueryTx(context.Context, nero.Tx, *Queryer) ([]*model.Product, error)
	// QueryOne queries a Product
	QueryOne(context.Context, *Queryer) (*model.Product, error)
	// QueryOneTx queries a Product in a transaction
	QueryOneTx(context.Context, nero.Tx, *Queryer) (*model.Product, error)
	// Update updates a Product or many Products
	Update(context.Context, *Updater) (rowsAffected int64, err error)
	// UpdateTx updates a Product many Products in a transaction
	UpdateTx(context.Context, nero.Tx, *Updater) (rowsAffected int64, err error)
	// Delete deletes a Product or many Products
	Delete(context.Context, *Deleter) (rowsAffected int64, err error)
	// Delete deletes a Product or many Products in a transaction
	DeleteTx(context.Context, nero.Tx, *Deleter) (rowsAffected int64, err error)
	// Aggregate runs an aggregate query
	Aggregate(context.Context, *Aggregator) error
	// Aggregate runs an aggregate query in a transaction
	AggregateTx(context.Context, nero.Tx, *Aggregator) error
}

// Creator is a create builder
type Creator struct {
	name      string
	updatedAt *time.Time
}

// NewCreator returns a Creator
func NewCreator() *Creator {
	return &Creator{}
}

// Name sets the Name field
func (c *Creator) Name(name string) *Creator {
	c.name = name
	return c
}

// UpdatedAt sets the UpdatedAt field
func (c *Creator) UpdatedAt(updatedAt *time.Time) *Creator {
	c.updatedAt = updatedAt
	return c
}

// Validate validates the fields
func (c *Creator) Validate() error {
	var err error
	if isZero(c.name) {
		err = multierror.Append(err, nero.NewErrRequiredField("name"))
	}

	if isZero(c.updatedAt) {
		err = multierror.Append(err, nero.NewErrRequiredField("updated_at"))
	}

	return err
}

// Queryer is a query builder
type Queryer struct {
	limit  uint
	offset uint
	pfs    []PredFunc
	sfs    []SortFunc
}

// NewQueryer returns a Queryer
func NewQueryer() *Queryer {
	return &Queryer{}
}

// Where applies predicates
func (q *Queryer) Where(pfs ...PredFunc) *Queryer {
	q.pfs = append(q.pfs, pfs...)
	return q
}

// Sort applies sorting expressions
func (q *Queryer) Sort(sfs ...SortFunc) *Queryer {
	q.sfs = append(q.sfs, sfs...)
	return q
}

// Limit applies limit
func (q *Queryer) Limit(limit uint) *Queryer {
	q.limit = limit
	return q
}

// Offset applies offset
func (q *Queryer) Offset(offset uint) *Queryer {
	q.offset = offset
	return q
}

// Updater is an update builder
type Updater struct {
	name      string
	updatedAt *time.Time
	pfs       []PredFunc
}

// NewUpdater returns an Updater
func NewUpdater() *Updater {
	return &Updater{}
}

// Name sets the Name field
func (c *Updater) Name(name string) *Updater {
	c.name = name
	return c
}

// UpdatedAt sets the UpdatedAt field
func (c *Updater) UpdatedAt(updatedAt *time.Time) *Updater {
	c.updatedAt = updatedAt
	return c
}

// Where applies predicates
func (u *Updater) Where(pfs ...PredFunc) *Updater {
	u.pfs = append(u.pfs, pfs...)
	return u
}

// Deleter is a delete builder
type Deleter struct {
	pfs []PredFunc
}

// NewDeleter returns a Deleter
func NewDeleter() *Deleter {
	return &Deleter{}
}

// Where applies predicates
func (d *Deleter) Where(pfs ...PredFunc) *Deleter {
	d.pfs = append(d.pfs, pfs...)
	return d
}

// Aggregator is an aggregate query builder
type Aggregator struct {
	v      interface{}
	aggfs  []AggFunc
	pfs    []PredFunc
	sfs    []SortFunc
	groups []Column
}

// NewAggregator expects a v and returns an Aggregator
// where 'v' argument must be an array of struct
func NewAggregator(v interface{}) *Aggregator {
	return &Aggregator{v: v}
}

// Aggregate applies aggregate functions
func (a *Aggregator) Aggregate(aggfs ...AggFunc) *Aggregator {
	a.aggfs = append(a.aggfs, aggfs...)
	return a
}

// Where applies predicates
func (a *Aggregator) Where(pfs ...PredFunc) *Aggregator {
	a.pfs = append(a.pfs, pfs...)
	return a
}

// Sort applies sorting expressions
func (a *Aggregator) Sort(sfs ...SortFunc) *Aggregator {
	a.sfs = append(a.sfs, sfs...)
	return a
}

// Group applies group clauses
func (a *Aggregator) Group(cols ...Column) *Aggregator {
	a.groups = append(a.groups, cols...)
	return a
}

// rollback performs a rollback
func rollback(tx nero.Tx, err error) error {
	rerr := tx.Rollback()
	if rerr != nil {
		err = errors.Wrapf(err, "rollback error: %v", rerr)
	}
	return err
}

// isZero checks if v is a zero-value
func isZero(v interface{}) bool {
	return reflect.ValueOf(v).IsZero()
}
